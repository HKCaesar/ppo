#
# The settings in this file configure the ontology build process.  Most
# ontology projects will only need to customize the values of the two variables
# in the "Main" section, immediately below.
#


[Main]
#--------
# IMPORTANT: Virtually all projects will need to customize the two variables in
# this section.
#--------

# The IRI (ID) for the compiled ontology (REQUIRED).  By default, the name of
# the final, compiled ontology file will be extracted from this IRI.  If you
# wish to use a custom name for this file, set the value of the variable
# "ontology_file" in the "Ontology" section of the configuration file.
ontologyIRI = https://raw.githubusercontent.com/PlantPhenoOntology/PPO/master/ontology/ppo.owl

# Ontology terms source files.  These are the names of the terms source files
# that should be compiled into the final ontology, specified as a
# comma-separated list. Shell-style wildcards are supported.  As long as your
# project follows the suggested folder structure, you only need to provide the
# names of the files here, not full filesystem paths.  If your source files are
# in a non-standard location, you can set the value of the variable "termsdir",
# in the "Ontology" section of the configuration file, to specify the folder in
# which the source files are located.
#
# Example: termsfiles = ont_main_classes.xlsx, ont_supporting_classes.xlsx, ont_properties.ods
# Example: termsfiles = *_classes.xlsx, ont_properties.ods
#
termsfiles = PPO_supporting_classes.ods, PPO_properties.ods,
    PPO_non-reproductive_stages.ods, PPO_reproductive_stages.ods,
    PPO_trait_classes.ods, PPO_trait_convenience_classes.ods,
    PPO_linker_classes.ods


#--------
# NOTE: You should not need to modify anything else in the rest of this
# configuration file unless you have a non-standard source structure (e.g., you
# are not following the suggested directory structure).
#--------


[Build]
#--------
# Variables for customizing the build process for both import modules and the
# main ontology.  Note that relative file paths will be interpreted relative to
# the location of this configuration file.
#--------

# The location of the build directory.  All output files will be written to
# this directory.  If the directory does not exist, it will be created as part
# of the initial build process.  By default, the build directory will be called
# "build" and will be located in the same place as this configuration file.
# Can be either a relative or an absolute path.
builddir = 


[Imports]
#--------
# Variables for customizing the import module build process.  Note that
# relative file paths will be interpreted relative to the location of this
# configuration file.
#--------

# The location of the source files for the import modules.  By default, this
# will be inferred from the location of this configuration file, but you can
# customize it here if your project does not follow the standard folder
# structure.  Can be either a relative or an absolute path.
#
# Example: importsdir = src/imports
#
importsdir = 

# The location and name of the top-level imports source file.  This is the file
# that lists the ontologies from which terms should be imported.  By default,
# the first file in the imports source folder that matches the pattern
# "imported_ontologies.*" will be used.  If no matching file is found,
# "imported_ontologies.csv" will be used.  Can be either a relative or an
# absolute path.
#
# Example: top_importsfile = src/imports/imported_ontologies.csv
#
top_importsfile = 

# The base IRI to use when generating IRIs for the import module OWL files.  By
# default, a suitable base IRI will be inferred from the main ontology IRI, but
# this is only possible if the path in the ontology IRI and the import modules
# location follow the default project folder layout.  Otherwise, a base IRI for
# the modules will need to be explicitly provided.  The base IRI should be
# chosen so that the generated IRIs will resolve to actual file locations.  For
# example, you could set this to a path on the local filesystem, or even
# better, the base IRI for accessing the modules on a public source repository
# (e.g., on Github).
mod_baseIRI = 

# The suffix to use for naming the import module OWL files.  By default, this
# will be generated from the name of the main ontology file.  For example, if
# the ontology file is "ppo.owl", the import module files will be named
# "*_ppo_import_module.owl".
import_mod_suffix = 


[Ontology]
#--------
# Variables for customizing ontology compilation.  Note that relative file
# paths will be interpreted relative to the location of this configuration
# file.
#--------

# The name of the compiled ontology OWL file.  By default, the file name will
# be extracted from the ontology IRI, if possible.  If the desired ontology
# file name is not in the IRI path, you can set a custom value here.
ontology_file =

# The location and name of the base ontology file.  By default, the location
# will be inferred from the path to this configuration file and the file name
# will be generated from the ontology file name.  For example, if the ontology
# file name is "ppo.owl", the base ontology file will be called "ppo-base.owl".
# If you have a non-standard project folder structure or source naming
# conventions, you might need to customize the value of this variable.  Can be
# either a relative or an absolute path.
#
# Example: base_ontology_file = src/ontology-base.owl
#
base_ontology_file = 

# The location of the ontology entities/terms source files.  Be default, the
# location will be inferred from the location of this configuration file.  Can
# be either a relative or an absolute path.
#
# Example: termsdir = src/terms
#
termsdir = 

